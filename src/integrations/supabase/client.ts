
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Try to use environment variables with basic fallbacks
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'DISCONNECTED';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || 'DISCONNECTED';

// Create a simple dummy client for when Supabase is disconnected
const createDummyClient = () => {
  // Return a minimal object with required methods
  return {
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      signInWithPassword: () => Promise.resolve({ 
        data: { user: null, session: null }, 
        error: null
      }),
      signUp: () => Promise.resolve({ 
        data: { user: null, session: null }, 
        error: null
      }),
      signOut: () => Promise.resolve({ error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } })
    },
    from: () => ({
      select: () => ({
        eq: () => ({
          maybeSingle: () => Promise.resolve({ data: null, error: null }),
          single: () => Promise.resolve({ data: null, error: null })
        }),
        single: () => Promise.resolve({ data: null, error: null })
      }),
      upsert: () => Promise.resolve({ data: null, error: null })
    })
  };
};

// Simplify the check to decide if we use a dummy client
const isDummyMode = SUPABASE_URL === 'DISCONNECTED' || SUPABASE_PUBLISHABLE_KEY === 'DISCONNECTED';

// Create either a real or dummy client
const supabase = isDummyMode 
  ? createDummyClient() as any
  : createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Export the client and a helper function
export { supabase };
export const isSupabaseConnected = () => !isDummyMode;
