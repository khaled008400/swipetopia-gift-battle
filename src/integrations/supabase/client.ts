
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ifeuccpukdosoxtufxzi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlmZXVjY3B1a2Rvc294dHVmeHppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3NDM2MjAsImV4cCI6MjA1NzMxOTYyMH0.I4wy6OFJY_zYNrhYWjw7xphFTBc5vT9sgNM3i2iPUqI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create test users - only use this in development
export const createTestUsers = async (serviceKey: string) => {
  if (process.env.NODE_ENV === 'production') {
    console.warn('createTestUsers should not be used in production!');
    return;
  }
  
  const testUsers = [
    { email: 'admin@example.com', username: 'admin', role: 'admin', coins: 1000 },
    { email: 'seller@example.com', username: 'coolseller', role: 'seller', coins: 500 },
    { email: 'streamer@example.com', username: 'topstreamer', role: 'streamer', coins: 750 },
    { email: 'user1@example.com', username: 'regularuser1', role: 'viewer', coins: 150 },
    { email: 'user2@example.com', username: 'fashionlover', role: 'viewer', coins: 200 },
    { email: 'user3@example.com', username: 'techguy', role: 'viewer', coins: 175 },
    { email: 'user4@example.com', username: 'travelbug', role: 'viewer', coins: 225 },
    { email: 'user5@example.com', username: 'foodiestar', role: 'viewer', coins: 125 },
  ];

  const results = [];
  
  // Create an admin client with the provided service key
  const adminClient = createClient(SUPABASE_URL, serviceKey);
  
  for (const user of testUsers) {
    try {
      // Sign up the user
      const { data: authData, error: signUpError } = await supabase.auth.signUp({
        email: user.email,
        password: 'Password123!',
        options: {
          data: {
            username: user.username,
            role: user.role
          }
        }
      });

      if (signUpError) {
        // If user already exists, try to sign in to get the user ID
        if (signUpError.message.includes('already registered')) {
          const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
            email: user.email,
            password: 'Password123!'
          });
          
          if (signInError) {
            console.error(`Error signing in user ${user.email}:`, signInError.message);
            results.push({ email: user.email, success: false, error: signInError.message });
            continue;
          }
          
          if (!signInData.user) {
            console.error(`No user returned for sign in ${user.email}`);
            results.push({ email: user.email, success: false, error: 'No user returned for sign in' });
            continue;
          }
          
          // Create or update the profile using the obtained user ID with admin client
          const { error: profileError } = await adminClient
            .from('profiles')
            .upsert({
              id: signInData.user.id,
              username: user.username,
              coins: user.coins,
              avatar_url: `https://i.pravatar.cc/150?u=${user.username}`
            }, { onConflict: 'id' });
  
          if (profileError) {
            console.error(`Error creating profile for ${user.email}:`, profileError.message);
            results.push({ email: user.email, success: false, error: profileError.message });
            continue;
          }
          
          results.push({ email: user.email, success: true });
          continue;
        }
        
        console.error(`Error creating user ${user.email}:`, signUpError.message);
        results.push({ email: user.email, success: false, error: signUpError.message });
        continue;
      }

      if (!authData.user) {
        console.error(`No user returned for ${user.email}`);
        results.push({ email: user.email, success: false, error: 'No user returned' });
        continue;
      }

      // Create or update the profile using admin client
      const { error: profileError } = await adminClient
        .from('profiles')
        .upsert({
          id: authData.user.id,
          username: user.username,
          coins: user.coins,
          avatar_url: `https://i.pravatar.cc/150?u=${user.username}`
        });

      if (profileError) {
        console.error(`Error creating profile for ${user.email}:`, profileError.message);
        results.push({ email: user.email, success: false, error: profileError.message });
        continue;
      }

      results.push({ email: user.email, success: true });
    } catch (err) {
      console.error(`Unexpected error creating user ${user.email}:`, err);
      results.push({ email: user.email, success: false, error: err.message });
    }
  }

  return results;
};
